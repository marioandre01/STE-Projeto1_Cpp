
Lab_08_GPIO_and_External_Interrupts_p2.elf: formato do arquivo elf32-avr

Seções:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800200  00800200  0000042a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d9c  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018a8  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000bbc  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1a  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00002fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  00002fd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Desmontagem da seção .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	4b c1       	rjmp	.+662    	; 0x2b0 <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8e c0       	rjmp	.+284    	; 0x17a <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 eb       	ldi	r30, 0xB6	; 182
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 30       	cpi	r26, 0x0A	; 10
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	04 d1       	rcall	.+520    	; 0x328 <main>
 120:	48 c1       	rjmp	.+656    	; 0x3b2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z11millis_initv>:
int ultimo_tempo_interup = 0;
int now = 0;

volatile uint64_t millis_prv = 0;

void millis_init() {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0;
 12c:	84 e4       	ldi	r24, 0x44	; 68
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	10 82       	st	Z, r1
	// set timer0 with CLKio/8 prescaler
	TCCR0B = _BV(CS01) | _BV(CS00);
 134:	85 e4       	ldi	r24, 0x45	; 69
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	23 e0       	ldi	r18, 0x03	; 3
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
	// clear any TOV1 Flag set when the timer overflowed
	TIFR0 &= ~TOV0;
 13e:	85 e3       	ldi	r24, 0x35	; 53
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	25 e3       	ldi	r18, 0x35	; 53
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
	// set timer0 counter initial value to 0
	TCNT0 = 0x0;
 14e:	86 e4       	ldi	r24, 0x46	; 70
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	10 82       	st	Z, r1
	// enable timer overflow interrupt for Timer0
	TIMSK0 = _BV(TOIE0);
 156:	8e e6       	ldi	r24, 0x6E	; 110
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
	// clear the Power Reduction Timer/Counter0
	PRR0 &= ~PRTIM0;
 160:	84 e6       	ldi	r24, 0x64	; 100
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	24 e6       	ldi	r18, 0x64	; 100
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	f9 01       	movw	r30, r18
 16a:	20 81       	ld	r18, Z
 16c:	2a 7f       	andi	r18, 0xFA	; 250
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
}
 172:	00 00       	nop
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <__vector_23>:

// TIMER0 interrupt handler
ISR(TIMER0_OVF_vect) {
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 18a:	0f 92       	push	r0
 18c:	af 92       	push	r10
 18e:	bf 92       	push	r11
 190:	cf 92       	push	r12
 192:	df 92       	push	r13
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
	// reset the counter (overflow is cleared automatically)
	TCNT0 = (uint8_t) (0xFF - ((F_CPU / 8) / 1000)); // use CLKio/8 prescaler (set CS0n accordingly above)
 1ba:	86 e4       	ldi	r24, 0x46	; 70
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	2f e2       	ldi	r18, 0x2F	; 47
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 83       	st	Z, r18
	millis_prv++;
 1c4:	a0 90 02 02 	lds	r10, 0x0202	; 0x800202 <millis_prv>
 1c8:	b0 90 03 02 	lds	r11, 0x0203	; 0x800203 <millis_prv+0x1>
 1cc:	c0 90 04 02 	lds	r12, 0x0204	; 0x800204 <millis_prv+0x2>
 1d0:	d0 90 05 02 	lds	r13, 0x0205	; 0x800205 <millis_prv+0x3>
 1d4:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <millis_prv+0x4>
 1d8:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <millis_prv+0x5>
 1dc:	00 91 08 02 	lds	r16, 0x0208	; 0x800208 <millis_prv+0x6>
 1e0:	10 91 09 02 	lds	r17, 0x0209	; 0x800209 <millis_prv+0x7>
 1e4:	2a 2d       	mov	r18, r10
 1e6:	3b 2d       	mov	r19, r11
 1e8:	4c 2d       	mov	r20, r12
 1ea:	5d 2d       	mov	r21, r13
 1ec:	6e 2d       	mov	r22, r14
 1ee:	7f 2d       	mov	r23, r15
 1f0:	80 2f       	mov	r24, r16
 1f2:	91 2f       	mov	r25, r17
 1f4:	a1 e0       	ldi	r26, 0x01	; 1
 1f6:	d1 d0       	rcall	.+418    	; 0x39a <__adddi3_s8>
 1f8:	a2 2e       	mov	r10, r18
 1fa:	b3 2e       	mov	r11, r19
 1fc:	c4 2e       	mov	r12, r20
 1fe:	d5 2e       	mov	r13, r21
 200:	e6 2e       	mov	r14, r22
 202:	f7 2e       	mov	r15, r23
 204:	08 2f       	mov	r16, r24
 206:	19 2f       	mov	r17, r25
 208:	a0 92 02 02 	sts	0x0202, r10	; 0x800202 <millis_prv>
 20c:	b0 92 03 02 	sts	0x0203, r11	; 0x800203 <millis_prv+0x1>
 210:	c0 92 04 02 	sts	0x0204, r12	; 0x800204 <millis_prv+0x2>
 214:	d0 92 05 02 	sts	0x0205, r13	; 0x800205 <millis_prv+0x3>
 218:	e0 92 06 02 	sts	0x0206, r14	; 0x800206 <millis_prv+0x4>
 21c:	f0 92 07 02 	sts	0x0207, r15	; 0x800207 <millis_prv+0x5>
 220:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <millis_prv+0x6>
 224:	10 93 09 02 	sts	0x0209, r17	; 0x800209 <millis_prv+0x7>
}
 228:	00 00       	nop
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	bf 90       	pop	r11
 252:	af 90       	pop	r10
 254:	0f 90       	pop	r0
 256:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 25a:	0f 90       	pop	r0
 25c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <_Z9valor_ledi>:
// return elapsed time in milliseconds
uint64_t millis() {
	return millis_prv;
}

void valor_led(int est_led) {
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	1f 92       	push	r1
 26c:	1f 92       	push	r1
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	9a 83       	std	Y+2, r25	; 0x02
 274:	89 83       	std	Y+1, r24	; 0x01

	if (est_led == 1) {
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	51 f4       	brne	.+20     	; 0x292 <_Z9valor_ledi+0x2c>
		PORTH |= (1 << PH6);
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	22 e0       	ldi	r18, 0x02	; 2
 284:	31 e0       	ldi	r19, 0x01	; 1
 286:	f9 01       	movw	r30, r18
 288:	20 81       	ld	r18, Z
 28a:	20 64       	ori	r18, 0x40	; 64
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
	} else {
		PORTH &= ~(1 << PH6);
	}
}
 290:	09 c0       	rjmp	.+18     	; 0x2a4 <_Z9valor_ledi+0x3e>
void valor_led(int est_led) {

	if (est_led == 1) {
		PORTH |= (1 << PH6);
	} else {
		PORTH &= ~(1 << PH6);
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	22 e0       	ldi	r18, 0x02	; 2
 298:	31 e0       	ldi	r19, 0x01	; 1
 29a:	f9 01       	movw	r30, r18
 29c:	20 81       	ld	r18, Z
 29e:	2f 7b       	andi	r18, 0xBF	; 191
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
	}
}
 2a4:	00 00       	nop
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <__vector_6>:
		return 0;
	}
}

//Interrupção pino 3
ISR(INT5_vect) {
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 2c0:	0f 92       	push	r0
 2c2:	2f 93       	push	r18
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
	if (PINE & (1 << PINE5)) { //lê pino 3
 2d4:	8c e2       	ldi	r24, 0x2C	; 44
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	fc 01       	movw	r30, r24
 2da:	80 81       	ld	r24, Z
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	80 72       	andi	r24, 0x20	; 32
 2e2:	99 27       	eor	r25, r25
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	89 2b       	or	r24, r25
 2e8:	09 f4       	brne	.+2      	; 0x2ec <__vector_6+0x3c>
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	22 23       	and	r18, r18
 2ee:	39 f0       	breq	.+14     	; 0x2fe <__vector_6+0x4e>
		estado_led = 1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_end+0x1>
 2f8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
	} else {
		estado_led = 0;
	}

}
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <__vector_6+0x56>
//Interrupção pino 3
ISR(INT5_vect) {
	if (PINE & (1 << PINE5)) { //lê pino 3
		estado_led = 1;
	} else {
		estado_led = 0;
 2fe:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__data_end+0x1>
 302:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_end>
	}

}
 306:	00 00       	nop
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	2f 91       	pop	r18
 316:	0f 90       	pop	r0
 318:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 31c:	0f 90       	pop	r0
 31e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <main>:

int main(void) {
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62

cli();
//desativa interrupção global

millis_init(); //inicia função miliis()
 330:	f8 94       	cli
 332:	f8 de       	rcall	.-528    	; 0x124 <_Z11millis_initv>

//setup - configuração dos pinos
DDRH |= (1 << DDH6); //pino 9 como saída
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	31 e0       	ldi	r19, 0x01	; 1
 33c:	f9 01       	movw	r30, r18
 33e:	20 81       	ld	r18, Z
 340:	20 64       	ori	r18, 0x40	; 64
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18
PORTH &= ~(1 << PH6); //pino 9 definido como LOW
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	22 e0       	ldi	r18, 0x02	; 2
 34c:	31 e0       	ldi	r19, 0x01	; 1
 34e:	f9 01       	movw	r30, r18
 350:	20 81       	ld	r18, Z
 352:	2f 7b       	andi	r18, 0xBF	; 191
 354:	fc 01       	movw	r30, r24
 356:	20 83       	st	Z, r18

DDRE &= ~(1 << DDE5); //pino 3 como entrada
 358:	8d e2       	ldi	r24, 0x2D	; 45
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	2d e2       	ldi	r18, 0x2D	; 45
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	f9 01       	movw	r30, r18
 362:	20 81       	ld	r18, Z
 364:	2f 7d       	andi	r18, 0xDF	; 223
 366:	fc 01       	movw	r30, r24
 368:	20 83       	st	Z, r18

EICRB |= (0 << ISC50) | (0 << ISC51);	// Interromper no nivel baixo
 36a:	8a e6       	ldi	r24, 0x6A	; 106
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	2a e6       	ldi	r18, 0x6A	; 106
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	f9 01       	movw	r30, r18
 374:	20 81       	ld	r18, Z
 376:	fc 01       	movw	r30, r24
 378:	20 83       	st	Z, r18
//EICRB = 0;
EIMSK |= (1 << INT5);	// habilita interrupção INT5 pino 3
 37a:	8d e3       	ldi	r24, 0x3D	; 61
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	2d e3       	ldi	r18, 0x3D	; 61
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	f9 01       	movw	r30, r18
 384:	20 81       	ld	r18, Z
 386:	20 62       	ori	r18, 0x20	; 32
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18

sei();
 38c:	78 94       	sei
//ativa interrupção global

//Loop
while (1) {
	valor_led(estado_led);
 38e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
 392:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x1>
 396:	67 df       	rcall	.-306    	; 0x266 <_Z9valor_ledi>

sei();
//ativa interrupção global

//Loop
while (1) {
 398:	fa cf       	rjmp	.-12     	; 0x38e <main+0x66>

0000039a <__adddi3_s8>:
 39a:	00 24       	eor	r0, r0
 39c:	a7 fd       	sbrc	r26, 7
 39e:	00 94       	com	r0
 3a0:	2a 0f       	add	r18, r26
 3a2:	30 1d       	adc	r19, r0
 3a4:	40 1d       	adc	r20, r0
 3a6:	50 1d       	adc	r21, r0
 3a8:	60 1d       	adc	r22, r0
 3aa:	70 1d       	adc	r23, r0
 3ac:	80 1d       	adc	r24, r0
 3ae:	90 1d       	adc	r25, r0
 3b0:	08 95       	ret

000003b2 <_exit>:
 3b2:	f8 94       	cli

000003b4 <__stop_program>:
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <__stop_program>
