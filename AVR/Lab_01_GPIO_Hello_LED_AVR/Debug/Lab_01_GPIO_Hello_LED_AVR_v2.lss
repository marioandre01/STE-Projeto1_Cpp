
Lab_01_GPIO_Hello_LED_AVR_v2.elf: formato do arquivo elf32-avr

Seções:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000558  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cb2  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001456  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000bbc  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1a  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00002b98  2**0
                  CONTENTS, READONLY, DEBUGGING

Desmontagem da seção .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	02 d0       	rcall	.+4      	; 0xfa <main>
  f6:	7e c0       	rjmp	.+252    	; 0x1f4 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <main>:
#include<avr/io.h>

int main(void) {
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62

	//setup - configuração dos pinos

	//--pino 8-- DDH5 pino 8 da placa
	//pino 8 como saída
	DDRH |= (1 << DDH5); // faz um OR no bit 5 de DDRH para virar 1
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	31 e0       	ldi	r19, 0x01	; 1
 10a:	f9 01       	movw	r30, r18
 10c:	20 81       	ld	r18, Z
 10e:	20 62       	ori	r18, 0x20	; 32
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18

	//pino 8 definido como LOW
	PORTH &= ~(1 << PH5);
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	22 e0       	ldi	r18, 0x02	; 2
 11a:	31 e0       	ldi	r19, 0x01	; 1
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	2f 7d       	andi	r18, 0xDF	; 223
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18

	//--pino 9-- DDH6 pino 9 da placa
	//pino 9 como saída
	DDRH |= (1 << DDH6); // faz um OR no bit 6 de DDRH para virar 1
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	31 e0       	ldi	r19, 0x01	; 1
 12e:	f9 01       	movw	r30, r18
 130:	20 81       	ld	r18, Z
 132:	20 64       	ori	r18, 0x40	; 64
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18

	//pino 9 definido como LOW
	PORTH &= ~(1 << PH6);
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	22 e0       	ldi	r18, 0x02	; 2
 13e:	31 e0       	ldi	r19, 0x01	; 1
 140:	f9 01       	movw	r30, r18
 142:	20 81       	ld	r18, Z
 144:	2f 7b       	andi	r18, 0xBF	; 191
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18

	//--pino 2-- DDE4 pino 2 da placa
	//pino 2 como entrada
	DDRE &= ~(1 << DDE4);
 14a:	8d e2       	ldi	r24, 0x2D	; 45
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	2d e2       	ldi	r18, 0x2D	; 45
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	20 81       	ld	r18, Z
 156:	2f 7e       	andi	r18, 0xEF	; 239
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18

	//--pino 3-- DDE5 pino 3 da placa
	//pino 3 como entrada
	DDRE &= ~(1 << DDE5);
 15c:	8d e2       	ldi	r24, 0x2D	; 45
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	2d e2       	ldi	r18, 0x2D	; 45
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	f9 01       	movw	r30, r18
 166:	20 81       	ld	r18, Z
 168:	2f 7d       	andi	r18, 0xDF	; 223
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18

	//Loop
	while (1) {

		if (PINE & (1 << PINE4)) { //lê pino 2
 16e:	8c e2       	ldi	r24, 0x2C	; 44
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	80 71       	andi	r24, 0x10	; 16
 17c:	99 27       	eor	r25, r25
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	89 2b       	or	r24, r25
 182:	09 f4       	brne	.+2      	; 0x186 <main+0x8c>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	22 23       	and	r18, r18
 188:	51 f0       	breq	.+20     	; 0x19e <main+0xa4>
			PORTH |= 1 << PH5; //Define pino 8 como HIGH, liga o led
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	22 e0       	ldi	r18, 0x02	; 2
 190:	31 e0       	ldi	r19, 0x01	; 1
 192:	f9 01       	movw	r30, r18
 194:	20 81       	ld	r18, Z
 196:	20 62       	ori	r18, 0x20	; 32
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
 19c:	09 c0       	rjmp	.+18     	; 0x1b0 <main+0xb6>
		} else {
			PORTH &= ~(1 << PH5); //Define pino 8 como LOW, desliga o led
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	22 e0       	ldi	r18, 0x02	; 2
 1a4:	31 e0       	ldi	r19, 0x01	; 1
 1a6:	f9 01       	movw	r30, r18
 1a8:	20 81       	ld	r18, Z
 1aa:	2f 7d       	andi	r18, 0xDF	; 223
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18
		}

		if (PINE & (1 << PINE5)) { //lê pino 3
 1b0:	8c e2       	ldi	r24, 0x2C	; 44
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	fc 01       	movw	r30, r24
 1b6:	80 81       	ld	r24, Z
 1b8:	88 2f       	mov	r24, r24
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	80 72       	andi	r24, 0x20	; 32
 1be:	99 27       	eor	r25, r25
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	89 2b       	or	r24, r25
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <main+0xce>
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	22 23       	and	r18, r18
 1ca:	51 f0       	breq	.+20     	; 0x1e0 <main+0xe6>
			PORTH |= 1 << PH6; //Define pino 9 como HIGH, liga o led
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	22 e0       	ldi	r18, 0x02	; 2
 1d2:	31 e0       	ldi	r19, 0x01	; 1
 1d4:	f9 01       	movw	r30, r18
 1d6:	20 81       	ld	r18, Z
 1d8:	20 64       	ori	r18, 0x40	; 64
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
 1de:	c7 cf       	rjmp	.-114    	; 0x16e <main+0x74>
		} else {
			PORTH &= ~(1 << PH6); //Define pino 9 como LOW, desliga o led
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	22 e0       	ldi	r18, 0x02	; 2
 1e6:	31 e0       	ldi	r19, 0x01	; 1
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	2f 7b       	andi	r18, 0xBF	; 191
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
	//--pino 3-- DDE5 pino 3 da placa
	//pino 3 como entrada
	DDRE &= ~(1 << DDE5);

	//Loop
	while (1) {
 1f2:	bd cf       	rjmp	.-134    	; 0x16e <main+0x74>

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
