
Lab_02_UART_Serial_Communication_AVR.elf: formato do arquivo elf32-avr

Seções:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000005e8  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d24  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000bbc  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1a  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING

Desmontagem da seção .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	5a d0       	rcall	.+180    	; 0x1aa <main>
  f6:	64 c0       	rjmp	.+200    	; 0x1c0 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_Z10USART0Initv>:
#include <avr/io.h>
#define Fosc 16000000 // Clock Speed
#define BaudRate 9600
#define ValorUBRR (((Fosc/(BaudRate*16UL)))-1) //igual a 103 = 00000000 01100111

void USART0Init(void) {
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
// Set baud rate
	UBRR0H = (uint8_t) (ValorUBRR >> 8); //00000000 01100111 = 00000000 00000000 = 00000000
 102:	85 ec       	ldi	r24, 0xC5	; 197
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	10 82       	st	Z, r1
	UBRR0L = (uint8_t) ValorUBRR; //01100111
 10a:	84 ec       	ldi	r24, 0xC4	; 196
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	27 e6       	ldi	r18, 0x67	; 103
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18

// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 114:	82 ec       	ldi	r24, 0xC2	; 194
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	22 ec       	ldi	r18, 0xC2	; 194
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	26 60       	ori	r18, 0x06	; 6
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18

//enable transmission and reception
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 126:	81 ec       	ldi	r24, 0xC1	; 193
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	21 ec       	ldi	r18, 0xC1	; 193
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	20 81       	ld	r18, Z
 132:	28 61       	ori	r18, 0x18	; 24
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
}
 138:	00 00       	nop
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <_Z14USART0SendByteh>:

void USART0SendByte(uint8_t u8Data) {
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	1f 92       	push	r1
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	89 83       	std	Y+1, r24	; 0x01
//wait while previous byte is completed
	while (!(UCSR0A & (1 << UDRE0))) { //enquanto o bit UDRE0 no registrador UCSR0A for 0, ainda ha byte no buffer
 14c:	80 ec       	ldi	r24, 0xC0	; 192
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 2f       	mov	r24, r24
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	80 72       	andi	r24, 0x20	; 32
 15a:	99 27       	eor	r25, r25
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	89 2b       	or	r24, r25
 160:	09 f0       	breq	.+2      	; 0x164 <_Z14USART0SendByteh+0x24>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	22 23       	and	r18, r18
 166:	09 f0       	breq	.+2      	; 0x16a <_Z14USART0SendByteh+0x2a>
 168:	f1 cf       	rjmp	.-30     	; 0x14c <_Z14USART0SendByteh+0xc>

	};
// Transmit data
	UDR0 = u8Data;
 16a:	86 ec       	ldi	r24, 0xC6	; 198
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	29 81       	ldd	r18, Y+1	; 0x01
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
}
 174:	00 00       	nop
 176:	0f 90       	pop	r0
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <_Z17USART0ReceiveBytev>:

uint8_t USART0ReceiveByte() {
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
// Wait for byte to be received
	while (!(UCSR0A & (1 << RXC0))) { //enquanto o bit RXC0 no registrador UCSR0A for 0, ainda ha byte no buffer sendo recebido
 186:	80 ec       	ldi	r24, 0xC0	; 192
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fc 01       	movw	r30, r24
 18c:	80 81       	ld	r24, Z
 18e:	80 95       	com	r24
 190:	88 1f       	adc	r24, r24
 192:	88 27       	eor	r24, r24
 194:	88 1f       	adc	r24, r24
 196:	88 23       	and	r24, r24
 198:	09 f0       	breq	.+2      	; 0x19c <_Z17USART0ReceiveBytev+0x1e>
 19a:	f5 cf       	rjmp	.-22     	; 0x186 <_Z17USART0ReceiveBytev+0x8>

	};
// Return received data
	return UDR0;
 19c:	86 ec       	ldi	r24, 0xC6	; 198
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	fc 01       	movw	r30, r24
 1a2:	80 81       	ld	r24, Z
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <main>:

int main(void) {
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	1f 92       	push	r1
 1b0:	cd b7       	in	r28, 0x3d	; 61
	uint8_t u8TempData;
	//Initialize USART0
	USART0Init();
 1b2:	de b7       	in	r29, 0x3e	; 62
	while (1) {
		// Receive data
		u8TempData = USART0ReceiveByte();
 1b4:	a2 df       	rcall	.-188    	; 0xfa <_Z10USART0Initv>
 1b6:	e3 df       	rcall	.-58     	; 0x17e <_Z17USART0ReceiveBytev>

		//Send back to terminal
		USART0SendByte(u8TempData);
 1b8:	89 83       	std	Y+1, r24	; 0x01
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	c1 df       	rcall	.-126    	; 0x140 <_Z14USART0SendByteh>

int main(void) {
	uint8_t u8TempData;
	//Initialize USART0
	USART0Init();
	while (1) {
 1be:	fb cf       	rjmp	.-10     	; 0x1b6 <main+0xc>

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
